// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: orders.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const getOrderInfo = `-- name: GetOrderInfo :many
SELECT p.name as product_name, p.id as product_id, o.id as order_id, oi.quantity as quantity, s.name as shelve_name, ps.is_primary as shelve_is_primary
FROM orders o
         INNER JOIN order_items oi on o.id = oi.order_id
         INNER JOIN products p on p.id = oi.product_id
         INNER JOIN products_shelves ps on p.id = ps.product_id
         INNER JOIN public.shelves s on s.id = ps.shelves_id
WHERE o.id = ANY($1::bigint[])
ORDER BY o.id, p.id, ps.is_primary DESC
`

type GetOrderInfoRow struct {
	ProductName     string `json:"product_name"`
	ProductID       int64  `json:"product_id"`
	OrderID         int64  `json:"order_id"`
	Quantity        int32  `json:"quantity"`
	ShelveName      string `json:"shelve_name"`
	ShelveIsPrimary bool   `json:"shelve_is_primary"`
}

func (q *Queries) GetOrderInfo(ctx context.Context, dollar_1 []int64) ([]GetOrderInfoRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrderInfo, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrderInfoRow{}
	for rows.Next() {
		var i GetOrderInfoRow
		if err := rows.Scan(
			&i.ProductName,
			&i.ProductID,
			&i.OrderID,
			&i.Quantity,
			&i.ShelveName,
			&i.ShelveIsPrimary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
